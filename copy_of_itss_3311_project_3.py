# -*- coding: utf-8 -*-
"""Copy of ITSS 3311 Project 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ox92USmwYDDsaBRjaj5WJF_iJXbhfLqU

# Brief Summary:

The objective of this project is to create an algorithm that simulates 10,000 customers at a hypothetical bank. The information provided will include different elements such as information about the customer, their account, financial services, and the activity of their account over a one-year period.

Our simulation consists of unique customer information, which will consist of variables such as age, education level, marital status, gender, and annual income. Customers will have at least one credit card and things like their account numbers, interest rates, credit lines, and annual fees will be created and arranged.

### Two Steps:

1. **Creating Customer and Account Data:** Generating 10,000 customers giving them each their own personal information, account information, and financial information that all tie in together in a cohesive manner.

2. **Data Analysis:** Using different statistical calculations such as mean, median, and mode etc. on the previously generated customer and financial data.

This project will run on the platform Google Colab. The code and analysis will be demonstrated and explained thoroughly. The output will include the generated logs with the data and the statistical analysis.

# Code Analysis (How to solve the Problem)

The purpose of our project is to generate customer financial data for FarziBank. Each part of our project corresponds to a specific part of data analysis, hereâ€™s the impact of each function:

### 1. Customer Data Generation
**Function: generate_customers()**


This section of the code simulates financial information and demographics to produce customer data. To make sure the data is realistic, the generate_customers() function includes specific probability, which consists of:

* Age: Numbers between 20 and 80.
* Gender: "male" or "female."
* Marital Status: "Single" or "Married" based on age probability (younger people are more likely to be single).
* Number of Children: Determined using the generated age. (younger people will be less likely to have children and vice versa.)
* Education Level: Assigns an education level of completion from high school to PhD (higher education more likely the older the person is)





With the variables above we can now derive the following:

Annual Income: uses age and education level as its main variables.
Number of Accounts: uses marital status and number of children to determine the number of accounts.
Total Credit Line: takes both annual income and number of accts, to determine the credit line amount using the formula from the project description.
### 2. Account Data Generation
**Function: generate_accounts()**

Creates account data for each individual customer and creates a list for all of them. This ties financial data directly to each customer using a nested for loop to determine the variables below:


* Account Number: is generated using the customer ID
* Date Opened: generates a random date using the datetime module and processes it in a (year, month, day) format before January 1st, 2022.
* Credit Line: uses the value and rates it from 0.1 to 1.0
* Annual Fee: takes the credit line value generated and multiplies it by 1%
* APR: a generated percentage between 15% to 30%


### 3. Cohort Analysis

**Function: cohort_analysis()**

Distributes the data into 3 age sections: [20, 30] & [31-60] & [61-80]. The Describe function is then used to display statistical analysis including: (using the describe() function, it displays the following: Count, Mean, Standard Deviation, Min Value, 25th percentile, 50th percentile, 75th percentile, and Max Value.) So the given analysis is represented firstly grouped by age, next the describe() function displays marital status, number of children, and education level.

For the Cohort analysis, the describe function will then map the below variables from the generate_accounts() function:

* Number of Accounts
* Account Number Range
* Credit Line
* Annual Fee
* APR

This data will now be converted into Customer and Account Datasets.

4. Data Export

**Function: main()**

Transfers our code in (customers.to_csv & accounts.to_csv) to CSV format. This is the most efficient for future use for data visualization.
"""

import numpy as np
import pandas as pd
import random
from datetime import datetime, timedelta
import logging

# Configure logging
logging.basicConfig(filename="project_log.log", level=logging.INFO, format="%(asctime)s - %(message)s")
logger = logging.getLogger()

# Helper function to generate marital status based on age
def generate_marital_status(ages):
    marital_status = []
    for age in ages:
        if 20 <= age <= 30:
            marital_status.append(np.random.choice(["Single", "Married"], p=[0.75, 0.25]))
        elif 30 < age <= 60:
            marital_status.append(np.random.choice(["Single", "Married"], p=[0.25, 0.75]))
        else:  # 60 < age <= 80
            marital_status.append(np.random.choice(["Single", "Married"], p=[0.5, 0.5]))
    return marital_status

# Helper function to generate number of children based on age
def generate_number_of_children(ages):
    num_children = []
    for age in ages:
        if 20 <= age < 40:
            num_children.append(np.random.choice([0, 1, 2, 3, 4], p=[0.4, 0.3, 0.2, 0.1, 0]))
        else:  # 40 <= age <= 80
            num_children.append(np.random.choice([0, 1, 2, 3, 4], p=[0.1, 0.3, 0.3, 0.2, 0.1]))
    return num_children

# Helper function to generate education level based on age
def generate_education_level(ages):
    education_levels = []
    for age in ages:
        if 20 <= age <= 25:
            education_levels.append(np.random.choice(
                ["No Education", "High School", "Bachelor's Degree", "Master's Degree", "Ph.D."],
                p=[0.1, 0.5, 0.3, 0.1, 0]
            ))
        elif 25 < age <= 35:
            education_levels.append(np.random.choice(
                ["No Education", "High School", "Bachelor's Degree", "Master's Degree", "Ph.D."],
                p=[0.1, 0.5, 0.25, 0.1, 0.05]
            ))
        else:  # 35 < age <= 80
            education_levels.append(np.random.choice(
                ["No Education", "High School", "Bachelor's Degree", "Master's Degree", "Ph.D."],
                p=[0.1, 0.5, 0.25, 0.1, 0.05]
            ))
    return education_levels

# Generate random customer data
def generate_customers(n):
    """Generate customer data."""
    print("Generating customer data...")
    logger.info("Generating customers...")
    ages = np.random.randint(20, 81, n)
    customers = pd.DataFrame({
        "Customer ID": random.sample(range(1000000, 9999999), n),
        "Age": ages,
        "Gender": np.random.choice(["Male", "Female"], size=n),
        "Marital Status": generate_marital_status(ages),
        "Number of Children": generate_number_of_children(ages),
        "Education Level": generate_education_level(ages)
    })
    edu_map = {"No Education": 0, "High School": 1, "Bachelor's Degree": 2, "Master's Degree": 3, "Ph.D.": 4}
    customers["Annual Income"] = 40 * 52 * (15 + customers["Age"] / 10 + customers["Education Level"].map(edu_map) * 10)
    customers["Number of Accounts"] = customers["Number of Children"] + np.where(customers["Marital Status"] == "Married", 1, 0) + 1
    customers["Total Credit Line"] = customers["Annual Income"] * customers["Number of Accounts"] / 10
    print("Customer data generation complete!")
    return customers

# Generate random account data
def generate_accounts(customers):
    """Generate account data."""
    print("Generating account data...")
    logger.info("Generating accounts...")
    accounts = []
    for _, customer in customers.iterrows():
        for i in range(1, customer["Number of Accounts"] + 1):
            account = {
                "Customer ID": customer["Customer ID"],
                "Account Number": int(f"{customer['Customer ID']}{i}"),
                "Date Opened": (datetime.now() - timedelta(days=random.randint(0, min(customer["Age"] * 365, 3650)))).strftime("%Y-%m-%d"),
                "Credit Line": np.random.uniform(0.1, 1.0) * customer["Total Credit Line"],
                "Annual Fee": 0.01 * np.random.uniform(0.1, 1.0) * customer["Total Credit Line"],
                "APR": round(np.random.uniform(15, 30), 2)
            }
            accounts.append(account)
    accounts_df = pd.DataFrame(accounts)
    print("Account data generation complete!")
    return accounts_df

# Functional Testing Section: Cohort Analysis
def cohort_analysis(customers, accounts):
    """Perform functional testing by calculating cohort information."""
    print("\nPerforming functional testing (cohort analysis)...\n")
    logger.info("Starting cohort analysis...")

    # Customer Cohort Analysis
    print("Customer Cohort Analysis:")
    print(f"Number of Customers: {len(customers)}")
    print(f"Customer ID Range: {customers['Customer ID'].min()} - {customers['Customer ID'].max()}")
    print(f"Unique Customer IDs: {customers['Customer ID'].nunique()}")
    print(customers['Age'].describe())

    # Display statistics for different age groups
    print("\nCustomer Statistics by Age Group:")
    age_groups = {
        "20-30": customers[(customers["Age"] >= 20) & (customers["Age"] <= 30)],
        "31-60": customers[(customers["Age"] > 30) & (customers["Age"] <= 60)],
        "61-80": customers[(customers["Age"] > 60) & (customers["Age"] <= 80)]
    }

    for group, data in age_groups.items():
        print(f"\nAge Group: {group}")
        print(f"Number of Customers: {len(data)}")
        print("Marital Status Distribution:")
        print(data["Marital Status"].value_counts(normalize=True) * 100)
        print("Number of Children Distribution:")
        print(data["Number of Children"].value_counts(normalize=True) * 100)
        print("Education Level Distribution:")
        print(data["Education Level"].value_counts(normalize=True) * 100)

    # Account Cohort Analysis
    print("\nAccount Cohort Analysis:")
    print(f"Number of Accounts: {len(accounts)}")
    print(f"Account Number Range: {accounts['Account Number'].min()} - {accounts['Account Number'].max()}")
    print(accounts['Credit Line'].describe())
    print(accounts['Annual Fee'].describe())
    print(accounts['APR'].describe())

    print("\nCohort analysis complete.\n")
    logger.info("Cohort analysis complete.")

# Main execution
def main():
    print("Starting data generation process...")
    logger.info("Starting data generation...")
    customers = generate_customers(10000)
    accounts = generate_accounts(customers)

    # Save the datasets
    customers.to_csv("customers.csv", index=False)
    accounts.to_csv("accounts.csv", index=False)
    print("Customer and Account data saved to 'customers.csv' and 'accounts.csv'.")

    # Perform cohort analysis
    cohort_analysis(customers, accounts)

# Run the script
if __name__ == "__main__":
    main()